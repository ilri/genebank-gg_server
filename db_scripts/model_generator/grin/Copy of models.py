# NOTE: this was autogenerated from django, but already edited to rearrange the models.
# DO NOT OVERWRITE USING OUTPUT FROM manage.py inspectdb !!!!
# Fill in code as appropriate by hand...

from django.db import models





#"""

class MainSite(models.Model):
    id = models.IntegerField(primary_key=True)
    field1 = models.CharField(max_length=45)
    class Meta:
        db_table = u'main.site'

class Fam(models.Model):
    famno = models.IntegerField(primary_key=True)
    validfamno = models.ForeignKey('self', null=True, db_column='validfamno', blank=True, related_name='parentfamFam')
    family = models.CharField(unique=True, max_length=25)
    famauthor = models.CharField(unique=True, max_length=100, blank=True)
    altfamily = models.CharField(max_length=25, blank=True)
    subfamily = models.CharField(unique=True, max_length=25, blank=True)
    tribe = models.CharField(unique=True, max_length=25, blank=True)
    subtribe = models.CharField(unique=True, max_length=25, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)


    class Meta:
        db_table = u'prod.fam'

class Crop(models.Model):
    cropno = models.IntegerField(primary_key=True)
    crop = models.CharField(unique=True, max_length=20)
    cmt = models.CharField(max_length=2000, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.crop'
class Gn(models.Model):
    gno = models.IntegerField(primary_key=True)
    validgno = models.ForeignKey('self', null=True, db_column='validgno', blank=True, related_name='parentgnGn')
    qual = models.CharField(max_length=2, blank=True)
    ghybrid = models.CharField(max_length=1, blank=True)
    genus = models.CharField(unique=True, max_length=30)
    gauthor = models.CharField(unique=True, max_length=100, blank=True)
    subgenus = models.CharField(unique=True, max_length=30, blank=True)
    section = models.CharField(unique=True, max_length=30, blank=True)
    series = models.CharField(unique=True, max_length=30, blank=True)
    subseries = models.CharField(unique=True, max_length=30, blank=True)
    famno = models.ForeignKey(Fam, null=True, db_column='famno', blank=True, related_name='parentfamGn')
    othfamily = models.CharField(max_length=100, blank=True)
    cname = models.CharField(max_length=30, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    subsection = models.CharField(unique=True, max_length=30, blank=True)
    class Meta:
        db_table = u'prod.gn'

class Reg(models.Model):
    regno = models.IntegerField(primary_key=True)
    area = models.CharField(unique=True, max_length=20)
    region = models.CharField(unique=True, max_length=30, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.reg'

class Geo(models.Model):
    geono = models.IntegerField(primary_key=True)
    validgeono = models.ForeignKey('self', null=True, db_column='validgeono', blank=True, related_name='parentgeoGeo')
    country = models.CharField(unique=True, max_length=30)
    state = models.CharField(unique=True, max_length=20, blank=True)
    isofull = models.CharField(max_length=100, blank=True)
    isoshort = models.CharField(max_length=60, blank=True)
    statefull = models.CharField(max_length=60, blank=True)
    iso3 = models.CharField(max_length=3, blank=True)
    iso2 = models.CharField(max_length=2, blank=True)
    st = models.CharField(max_length=3, blank=True)
    cflag = models.CharField(max_length=1)
    lath = models.CharField(max_length=1, blank=True)
    lonh = models.CharField(max_length=1, blank=True)
    regno = models.ForeignKey(Reg, null=True, db_column='regno', blank=True, related_name='parentregGeo')
    changed = models.DateField(null=True, blank=True)
    oldname = models.CharField(max_length=100, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.geo'

class Coop(models.Model):
    cno = models.IntegerField(primary_key=True)
    validcno = models.ForeignKey('self', null=True, db_column='validcno', blank=True, related_name='parentcnCoop')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteCoop')
    lname = models.CharField(max_length=40, blank=True)
    title = models.CharField(max_length=5, blank=True)
    fname = models.CharField(max_length=30, blank=True)
    job = models.CharField(max_length=40, blank=True)
    org = models.CharField(max_length=60, blank=True)
    orgid = models.CharField(max_length=10, blank=True)
    add1 = models.CharField(unique=True, max_length=60, blank=True)
    add2 = models.CharField(max_length=60, blank=True)
    add3 = models.CharField(max_length=60, blank=True)
    city = models.CharField(unique=True, max_length=20, blank=True)
    zip = models.CharField(max_length=10, blank=True)
    geono = models.ForeignKey(Geo, unique=True, null=True, db_column='geono', blank=True, related_name='parentgeoCoop')
    phone1 = models.CharField(max_length=30, blank=True)
    phone2 = models.CharField(max_length=30, blank=True)
    fax = models.CharField(max_length=30, blank=True)
    email = models.CharField(max_length=100, blank=True)
    active = models.CharField(max_length=1, blank=True)
    cat = models.CharField(max_length=4, blank=True)
    arsregion = models.CharField(max_length=3, blank=True)
    discipline = models.CharField(max_length=10, blank=True)
    initials = models.CharField(max_length=6, blank=True)
    coop = models.CharField(unique=True, max_length=100, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.coop'

class Tax(models.Model):
    taxno = models.IntegerField(primary_key=True)
    validtaxno = models.ForeignKey('self', null=True, db_column='validtaxno', blank=True, related_name='parenttaxTax')
    shybrid = models.CharField(max_length=1, blank=True)
    species = models.CharField(max_length=30)
    sauthor = models.CharField(max_length=100, blank=True)
    ssphybrid = models.CharField(max_length=1, blank=True)
    subsp = models.CharField(max_length=30, blank=True)
    sspauthor = models.CharField(max_length=100, blank=True)
    varhybrid = models.CharField(max_length=1, blank=True)
    var = models.CharField(max_length=30, blank=True)
    varauthor = models.CharField(max_length=100, blank=True)
    svhybrid = models.CharField(max_length=1, blank=True)
    subvar = models.CharField(max_length=30, blank=True)
    svauthor = models.CharField(max_length=100, blank=True)
    fhybrid = models.CharField(max_length=1, blank=True)
    forma = models.CharField(max_length=30, blank=True)
    fauthor = models.CharField(max_length=100, blank=True)
    gno = models.ForeignKey(Gn, db_column='gno', related_name='parentgnTax')
    cropno = models.ForeignKey(Crop, null=True, db_column='cropno', blank=True, related_name='parentcropTax')
    psite1 = models.ForeignKey(MainSite, null=True, db_column='psite1', blank=True, related_name='mainpsite1Tax')
    psite2 = models.ForeignKey(MainSite, null=True, db_column='psite2', blank=True, related_name='mainpsite2Tax')
    rest = models.CharField(max_length=10, blank=True)
    lifeform = models.CharField(max_length=10, blank=True)
    fert = models.CharField(max_length=10, blank=True)
    pending = models.CharField(max_length=1, blank=True)
    qual = models.CharField(max_length=6, blank=True)
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnTax')
    verified = models.DateField(null=True, blank=True)
    taxon = models.CharField(unique=True, max_length=100, blank=True)
    taxauthor = models.CharField(unique=True, max_length=100, blank=True)
    protologue = models.CharField(max_length=240, blank=True)
    taxcmt = models.CharField(max_length=2000, blank=True)
    sitecmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    othname = models.CharField(max_length=240, blank=True)
    class Meta:
        db_table = u'prod.tax'

class Taxtorc(models.Model):
    taxno = models.IntegerField()
    dno = models.IntegerField()
    ct = models.IntegerField(null=True, blank=True)
    taxon = models.CharField(max_length=70, blank=True)
    crop = models.CharField(max_length=20, blank=True)
    cropno = models.IntegerField(null=True, blank=True)
    genus = models.CharField(max_length=30, blank=True)
    class Meta:
        db_table = u'prod.taxtorc'

class Pi(models.Model):
    pivol = models.IntegerField(primary_key=True)
    piyear = models.IntegerField()
    lowpi = models.IntegerField()
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.pi'

class Acc(models.Model):
    acid = models.IntegerField(primary_key=True)
    acp = models.CharField(unique=True, max_length=4)
    acno = models.IntegerField(unique=True)
    acs = models.CharField(unique=True, max_length=4, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteAcc')
    whynull = models.CharField(max_length=10, blank=True)
    core = models.CharField(max_length=1, blank=True)
    backup = models.CharField(max_length=1, blank=True)
    lifeform = models.CharField(max_length=10, blank=True)
    acimpt = models.CharField(max_length=10, blank=True)
    uniform = models.CharField(max_length=10, blank=True)
    acform = models.CharField(max_length=2, blank=True)
    received = models.DateField()
    datefmt = models.CharField(max_length=10, blank=True)
    taxno = models.ForeignKey(Tax, db_column='taxno', related_name='parenttaxAcc')
    pivol = models.ForeignKey(Pi, null=True, db_column='pivol', blank=True, related_name='parentpivolAcc')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.acc'

class Eval(models.Model):
    eno = models.IntegerField(primary_key=True)
    ename = models.CharField(unique=True, max_length=100)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteEval')
    geono = models.ForeignKey(Geo, null=True, db_column='geono', blank=True, related_name='parentgeoEval')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    methods = models.CharField(max_length=4000, blank=True)
    studytype = models.CharField(max_length=10, blank=True)
    class Meta:
        db_table = u'prod.eval'

class Aact(models.Model):
    aactno = models.IntegerField(primary_key=True)
    action = models.CharField(max_length=10)
    occurred = models.DateField(null=True, blank=True)
    fmtoccurred = models.CharField(max_length=10, blank=True)
    completed = models.DateField(null=True, blank=True)
    fmtcompleted = models.CharField(max_length=10, blank=True)
    showweb = models.CharField(max_length=1, blank=True)
    narr = models.CharField(max_length=2000, blank=True)
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentacAact')
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnAact')
    eno = models.ForeignKey(Eval, null=True, db_column='eno', blank=True, related_name='parentenAact')
    userid = models.CharField(max_length=10)
    created = models.DateField()
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.aact'

class Lit(models.Model):
    abbr = models.CharField(max_length=20, primary_key=True)
    stdabbr = models.CharField(max_length=240, blank=True)
    reftitle = models.CharField(max_length=240, blank=True)
    editor = models.CharField(max_length=240, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteLit')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.lit'

class Acit(models.Model):
    citno = models.IntegerField(primary_key=True)
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentacAcit')
    abbr = models.ForeignKey(Lit, null=True, db_column='abbr', blank=True, related_name='parentlitAcit')
    cittitle = models.CharField(max_length=240, blank=True)
    author = models.CharField(max_length=240, blank=True)
    cityr = models.IntegerField(null=True, blank=True)
    citref = models.CharField(max_length=60, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.acit'

class Ag(models.Model):
    agname = models.CharField(max_length=20, primary_key=True)
    cmt = models.CharField(max_length=240, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteAg')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    url = models.CharField(max_length=240, blank=True)
    class Meta:
        db_table = u'prod.ag'

class Im(models.Model):
    imname = models.CharField(max_length=20, primary_key=True)
    site = models.ForeignKey(MainSite, primary_key=True, db_column='site', related_name='parentsiteIm')
    ivt = models.CharField(max_length=2)
    munits = models.CharField(max_length=2, blank=True)
    debit = models.CharField(max_length=1)
    dform = models.CharField(max_length=2)
    dquant = models.IntegerField(null=True, blank=True)
    dunits = models.CharField(max_length=2, blank=True)
    dcritical = models.IntegerField(null=True, blank=True)
    rcritical = models.IntegerField(null=True, blank=True)
    regen = models.CharField(max_length=10, blank=True)
    ptests = models.IntegerField(null=True, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    cno = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.im'

class Iv(models.Model):
    ivid = models.IntegerField(primary_key=True)
    ivp = models.CharField(unique=True, max_length=4)
    ivno = models.IntegerField(unique=True)
    ivs = models.CharField(unique=True, max_length=8, blank=True)
    ivt = models.CharField(unique=True, max_length=2)
    imname = models.ForeignKey(Im, null=True, db_column='imname', blank=True, related_name='parentimIv')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteIv')
    distribute = models.CharField(max_length=1, blank=True)
    loc1 = models.CharField(max_length=10, blank=True)
    loc2 = models.CharField(max_length=10, blank=True)
    loc3 = models.CharField(max_length=10, blank=True)
    loc4 = models.CharField(max_length=10, blank=True)
    onhand = models.IntegerField(null=True, blank=True)
    munits = models.CharField(max_length=2, blank=True)
    debit = models.CharField(max_length=1, blank=True)
    dform = models.CharField(max_length=2, blank=True)
    dquant = models.IntegerField(null=True, blank=True)
    dunits = models.CharField(max_length=2, blank=True)
    dcritical = models.IntegerField(null=True, blank=True)
    rcritical = models.IntegerField(null=True, blank=True)
    pstatus = models.CharField(max_length=10, blank=True)
    status = models.CharField(max_length=10, blank=True)
    statcmt = models.CharField(max_length=60, blank=True)
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentacIv')
    parent = models.IntegerField(null=True, blank=True)
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnIv')
    backupiv = models.IntegerField(null=True, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.iv'

class Ord(models.Model):
    orno = models.IntegerField(primary_key=True)
    origno = models.ForeignKey('self', null=True, db_column='origno', blank=True, related_name='parentordOrd')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteOrd')
    localno = models.IntegerField(null=True, blank=True)
    ortype = models.CharField(max_length=2, blank=True)
    ordered = models.DateField(null=True, blank=True)
    status = models.CharField(max_length=10, blank=True)
    done = models.CharField(max_length=1, blank=True)
    acted = models.DateField(null=True, blank=True)
    source = models.ForeignKey(Coop, null=True, db_column='source', blank=True, related_name='sourcecnOrd')
    orderer = models.ForeignKey(Coop, null=True, db_column='orderer', blank=True, related_name='orderercnOrd')
    shipto = models.ForeignKey(Coop, null=True, db_column='shipto', blank=True, related_name='shiptocnOrd')
    final = models.ForeignKey(Coop, db_column='final', related_name='finalcn')
    reqref = models.CharField(max_length=10, blank=True)
    supplylow = models.CharField(max_length=1, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    request = models.CharField(max_length=900, blank=True)
    class Meta:
        db_table = u'prod.ord'

class Al(models.Model):
    alno = models.IntegerField(primary_key=True)
    action = models.CharField(unique=True, max_length=10)
    acted = models.DateField(unique=True)
    acid = models.ForeignKey(Acc, unique=True, db_column='acid', related_name='parentaccAl')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteAl')
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnAl')
    ivid = models.ForeignKey(Iv, null=True, db_column='ivid', blank=True, related_name='parentivAl')
    orno = models.ForeignKey(Ord, null=True, db_column='orno', blank=True, related_name='parentordAl')
    oldtaxno = models.ForeignKey(Tax, null=True, db_column='oldtaxno', blank=True, related_name='parentoldtaxAl')
    newtaxno = models.ForeignKey(Tax, null=True, db_column='newtaxno', blank=True, related_name='parentnewtaxAl')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.al'

class An(models.Model):
    anno = models.IntegerField(primary_key=True)
    acid = models.ForeignKey(Acc, unique=True, db_column='acid', related_name='parentaccAn')
    idtype = models.CharField(max_length=10)
    idrank = models.IntegerField(null=True, blank=True)
    topname = models.CharField(max_length=1, blank=True)
    plantid = models.CharField(unique=True, max_length=40)
    searchid = models.CharField(max_length=40, blank=True)
    agname = models.ForeignKey(Ag, unique=True, null=True, db_column='agname', blank=True, related_name='parentagAn')
    ivid = models.ForeignKey(Iv, null=True, db_column='ivid', blank=True, related_name='parentivAn')
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnAn')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.an'

class Bad(models.Model):
    ivid = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.bad'

class Dsc(models.Model):
    dno = models.IntegerField(primary_key=True)
    dqname = models.CharField(unique=True, max_length=10)
    dname = models.CharField(max_length=30, blank=True)
    cac = models.CharField(max_length=1)
    dcat = models.CharField(max_length=10, blank=True)
    obtype = models.CharField(max_length=10)
    usecode = models.CharField(max_length=1, blank=True)
    obmaxlen = models.IntegerField(null=True, blank=True)
    obformat = models.CharField(max_length=15, blank=True)
    obmax = models.IntegerField(null=True, blank=True)
    obmin = models.IntegerField(null=True, blank=True)
    orgtype = models.CharField(max_length=10, blank=True)
    orgformat = models.CharField(max_length=15, blank=True)
    cropno = models.ForeignKey(Crop, unique=True, db_column='cropno', related_name='parentcropDsc')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteDsc')
    def_field = models.CharField(max_length=240, db_column='def', blank=True) # Field renamed because it was a Python reserved word.
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.dsc'

class Cd(models.Model):
    dno = models.ForeignKey(Dsc, primary_key=True, db_column='dno', related_name='parentdnCd')
    code = models.CharField(max_length=30, primary_key=True)
    def_field = models.CharField(max_length=240, db_column='def', blank=True) # Field renamed because it was a Python reserved word.
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.cd'

class Cg(models.Model):
    cgid = models.CharField(max_length=20, primary_key=True)
    cgname = models.CharField(unique=True, max_length=60, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteCg')
    historical = models.CharField(max_length=1, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.cg'

class Cn(models.Model):
    taxno = models.ForeignKey(Tax, primary_key=True, db_column='taxno', related_name='parenttaxCn')
    cname = models.CharField(max_length=50, primary_key=True)
    source = models.CharField(max_length=20, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    cnid = models.CharField(max_length=50, blank=True)
    class Meta:
        db_table = u'prod.cn'



class DelLog(models.Model):
    del_id = models.IntegerField(primary_key=True)
    owner_table = models.CharField(max_length=30, blank=True)
    table_col = models.CharField(max_length=400, blank=True)
    table_val = models.CharField(max_length=2000, blank=True)
    site = models.CharField(max_length=8, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    date_stamp = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.del_log'

class Dist(models.Model):
    distno = models.IntegerField(primary_key=True)
    taxno = models.ForeignKey(Tax, db_column='taxno', related_name='parenttaxDist')
    geono = models.ForeignKey(Geo, null=True, db_column='geono', blank=True, related_name='parentgeoDist')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.dist'


class Durl(models.Model):
    urltype = models.CharField(unique=True, max_length=10)
    seqno = models.IntegerField(unique=True)
    cropno = models.ForeignKey(Crop, unique=True, db_column='cropno', related_name='parentcropDurl')
    dno = models.ForeignKey(Dsc, unique=True, null=True, db_column='dno', blank=True, related_name='parentdnDurl')
    code = models.ForeignKey(Cd, unique=True, null=True, db_column='code', blank=True, related_name='parentcdDurl')
    caption = models.CharField(max_length=60, blank=True)
    url = models.CharField(max_length=100)
    site = models.ForeignKey(MainSite, db_column='site', related_name='parentsiteDurl')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10)
    created = models.DateField()
    modified = models.DateField(null=True, blank=True)
    eno = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.durl'

class Ecit(models.Model):
    citno = models.IntegerField(primary_key=True)
    eno = models.ForeignKey(Eval, db_column='eno', related_name='parentevalEcit')
    abbr = models.ForeignKey(Lit, null=True, db_column='abbr', blank=True, related_name='parentlitEcit')
    cittitle = models.CharField(max_length=240, blank=True)
    author = models.CharField(max_length=240, blank=True)
    cityr = models.IntegerField(null=True, blank=True)
    citref = models.CharField(max_length=240, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.ecit'

class Embr(models.Model):
    cno = models.ForeignKey(Coop, primary_key=True, db_column='cno', related_name='parentcnEmbr')
    eno = models.ForeignKey(Eval, primary_key=True, db_column='eno', related_name='parentevalEmbr')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.embr'


class Mrk(models.Model):
    mrkno = models.IntegerField(primary_key=True)
    cropno = models.ForeignKey(Crop, unique=True, db_column='cropno', related_name='parentcropMrk')
    site = models.ForeignKey(MainSite, db_column='site', related_name='parentsiteMrk')
    marker = models.CharField(unique=True, max_length=100)
    synonyms = models.CharField(max_length=200, blank=True)
    repeat_motif = models.CharField(max_length=100, blank=True)
    primers = models.CharField(max_length=200, blank=True)
    assay_conditions = models.CharField(max_length=4000, blank=True)
    range_products = models.CharField(max_length=60, blank=True)
    known_standards = models.CharField(max_length=300, blank=True)
    genbank_no = models.CharField(max_length=20, blank=True)
    map_location = models.CharField(max_length=100, blank=True)
    position = models.CharField(max_length=1000, blank=True)
    cmt = models.CharField(max_length=4000, blank=True)
    poly_type = models.CharField(max_length=10, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.mrk'

class Ga(models.Model):
    gano = models.IntegerField(primary_key=True)
    mrkno = models.ForeignKey(Mrk, unique=True, db_column='mrkno', related_name='parentmrkGa')
    eno = models.ForeignKey(Eval, unique=True, db_column='eno', related_name='parentevalGa')
    method = models.CharField(max_length=2000, blank=True)
    scoring_method = models.CharField(max_length=1000, blank=True)
    control_values = models.CharField(max_length=1000, blank=True)
    no_obs_alleles = models.IntegerField(null=True, blank=True)
    max_gob_alleles = models.IntegerField(null=True, blank=True)
    size_alleles = models.CharField(max_length=100, blank=True)
    unusual_alleles = models.CharField(max_length=100, blank=True)
    cmt = models.CharField(max_length=4000, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.ga'

class Gcit(models.Model):
    citno = models.IntegerField(primary_key=True)
    gno = models.ForeignKey(Gn, db_column='gno', related_name='parentgnGcit')
    abbr = models.ForeignKey(Lit, null=True, db_column='abbr', blank=True, related_name='parentlitGcit')
    cittitle = models.CharField(max_length=240, blank=True)
    author = models.CharField(max_length=240, blank=True)
    cityr = models.IntegerField(null=True, blank=True)
    citref = models.CharField(max_length=60, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.gcit'

class GeneralConfig(models.Model):
    config = models.CharField(max_length=1024, blank=True)
    label = models.CharField(max_length=64, blank=True)
    userid = models.CharField(max_length=32, blank=True)
    class Meta:
        db_table = u'prod.general_config'

class Germrule(models.Model):
    ruleno = models.IntegerField(primary_key=True)
    substrata = models.CharField(max_length=70, blank=True)
    temp = models.CharField(max_length=30, blank=True)
    requirements = models.CharField(max_length=500, blank=True)
    author = models.CharField(max_length=20, blank=True)
    category = models.CharField(max_length=10, blank=True)
    days = models.CharField(max_length=20, blank=True)
    taxno = models.ForeignKey(Tax, null=True, db_column='taxno', blank=True, related_name='parenttaxGermrule')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.germrule'


class Gnt(models.Model):
    gno = models.ForeignKey(Gn, primary_key=True, db_column='gno', related_name='parentgnGnt')
    famno = models.ForeignKey(Fam, primary_key=True, db_column='famno', related_name='parentfamGnt')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.gnt'

class Gob(models.Model):
    gobno = models.IntegerField(primary_key=True)
    gano = models.ForeignKey(Ga, unique=True, db_column='gano', related_name='parentgaGob')
    ivid = models.ForeignKey(Iv, unique=True, db_column='ivid', related_name='parentivGob')
    indiv = models.IntegerField(unique=True, null=True, blank=True)
    gob = models.CharField(max_length=1000)
    genbank_link = models.CharField(max_length=200, blank=True)
    image_link = models.CharField(max_length=200, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.gob'

class GrinwinIni(models.Model):
    type = models.CharField(max_length=32, blank=True)
    label = models.CharField(max_length=32, blank=True)
    value = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'prod.grinwin_ini'

class Src(models.Model):
    srcno = models.IntegerField(primary_key=True)
    srctype = models.CharField(max_length=10)
    srcdate = models.DateField(null=True, blank=True)
    datefmt = models.CharField(max_length=10, blank=True)
    origin = models.CharField(max_length=1, blank=True)
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentaccSrc')
    geono = models.ForeignKey(Geo, null=True, db_column='geono', blank=True, related_name='parentgeoSrc')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    srcqual = models.CharField(max_length=10, blank=True)
    class Meta:
        db_table = u'prod.src'

class Hab(models.Model):
    srcno = models.ForeignKey(Src, primary_key=True, db_column='srcno', related_name='parentsrcHab')
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentaccHab')
    latd = models.IntegerField(null=True, blank=True)
    latm = models.IntegerField(null=True, blank=True)
    lats = models.IntegerField(null=True, blank=True)
    lath = models.CharField(max_length=1, blank=True)
    lond = models.IntegerField(null=True, blank=True)
    lonm = models.IntegerField(null=True, blank=True)
    lons = models.IntegerField(null=True, blank=True)
    lonh = models.CharField(max_length=1, blank=True)
    elev = models.IntegerField(null=True, blank=True)
    quant = models.IntegerField(null=True, blank=True)
    units = models.CharField(max_length=2, blank=True)
    cform = models.CharField(max_length=2, blank=True)
    plants = models.IntegerField(null=True, blank=True)
    locality = models.CharField(max_length=240, blank=True)
    habitat = models.CharField(max_length=240, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    gctype = models.CharField(max_length=10, blank=True)
    gstype = models.CharField(max_length=10, blank=True)
    class Meta:
        db_table = u'prod.hab'

class Iact(models.Model):
    iactno = models.IntegerField(primary_key=True)
    action = models.CharField(max_length=10)
    occurred = models.DateField(null=True, blank=True)
    datefmt = models.CharField(max_length=10, blank=True)
    quant = models.IntegerField(null=True, blank=True)
    units = models.CharField(max_length=2, blank=True)
    iform = models.CharField(max_length=2, blank=True)
    ivid = models.ForeignKey(Iv, db_column='ivid', related_name='parentivIact')
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcoopIact')
    eno = models.ForeignKey(Eval, null=True, db_column='eno', blank=True, related_name='parentevalIact')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    iactqual = models.CharField(max_length=10, blank=True)
    class Meta:
        db_table = u'prod.iact'

class Ig(models.Model):
    igname = models.CharField(max_length=100, primary_key=True)
    site = models.ForeignKey(MainSite, primary_key=True, db_column='site', related_name='parentsiteIg')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.ig'

class Igm(models.Model):
    ivid = models.ForeignKey(Iv, primary_key=True, db_column='ivid', related_name='parentivIgm')
    igname = models.ForeignKey(Ig, primary_key=True, db_column='igname', related_name='parentigIgm')
    site = models.ForeignKey(Ig, primary_key=True, db_column='site', related_name='parentsiteIgm')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.igm'


class Ipr(models.Model):
    acid = models.ForeignKey(Acc, unique=True, db_column='acid', related_name='parentaccIpr')
    iprtype = models.CharField(unique=True, max_length=10)
    iprid = models.CharField(unique=True, max_length=40, blank=True)
    iprno = models.IntegerField(null=True, blank=True)
    iprcrop = models.CharField(max_length=60, blank=True)
    iprname = models.CharField(max_length=240, blank=True)
    issued = models.DateField(null=True, blank=True)
    expired = models.DateField(null=True, blank=True)
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcoopIpr')
    citno = models.ForeignKey(Acit, null=True, db_column='citno', blank=True, related_name='parentacitIpr')
    cmt = models.CharField(max_length=240, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteIpr')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    accepted = models.DateField(null=True, blank=True)
    expected = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.ipr'


class Mbr(models.Model):
    cno = models.ForeignKey(Coop, primary_key=True, db_column='cno', related_name='parentcnMbr')
    cgid = models.ForeignKey(Cg, primary_key=True, db_column='cgid', related_name='parentcgMbr')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    localid = models.CharField(max_length=10, blank=True)
    class Meta:
        db_table = u'prod.mbr'

class Mcit(models.Model):
    citno = models.IntegerField(primary_key=True)
    mrkno = models.ForeignKey(Mrk, db_column='mrkno', related_name='parentmrkMcit')
    abbr = models.ForeignKey(Lit, null=True, db_column='abbr', blank=True, related_name='parentlitMcit')
    cittitle = models.CharField(max_length=240, blank=True)
    author = models.CharField(max_length=240, blank=True)
    cityr = models.IntegerField(null=True, blank=True)
    citref = models.CharField(max_length=60, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.mcit'

class MenuItem(models.Model):
    menu_id = models.IntegerField(null=True, blank=True)
    seqno = models.IntegerField(null=True, blank=True)
    type = models.CharField(max_length=32, blank=True)
    module = models.CharField(max_length=64, blank=True)
    path = models.CharField(max_length=64, blank=True)
    item = models.CharField(max_length=64, blank=True)
    hint = models.CharField(max_length=64, blank=True)
    arg = models.CharField(max_length=254, blank=True)
    class Meta:
        db_table = u'prod.menu_item'

class MenuName(models.Model):
    menu_id = models.IntegerField(null=True, blank=True)
    menu_name = models.CharField(max_length=32, blank=True)
    user_id = models.CharField(max_length=32, blank=True)
    parent = models.CharField(max_length=32, blank=True)
    title = models.CharField(max_length=64, blank=True)
    class Meta:
        db_table = u'prod.menu_name'


class Narr(models.Model):
    acid = models.ForeignKey(Acc, primary_key=True, db_column='acid', related_name='parentaccNarr')
    ntype = models.CharField(max_length=1, primary_key=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    narr = models.CharField(max_length=4000)
    class Meta:
        db_table = u'prod.narr'

class Oact(models.Model):
    oactno = models.IntegerField(primary_key=True)
    action = models.CharField(max_length=10)
    acted = models.DateField()
    actid = models.CharField(max_length=40, blank=True)
    orno = models.ForeignKey(Ord, db_column='orno', related_name='parentordOact')
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteOact')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    coop = models.CharField(max_length=100, blank=True)
    cno = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.oact'

class Qual(models.Model):
    qno = models.IntegerField(primary_key=True)
    qual = models.CharField(max_length=30)
    dno = models.ForeignKey(Dsc, db_column='dno', related_name='parentdnQual')
    def_field = models.CharField(max_length=240, db_column='def', blank=True) # Field renamed because it was a Python reserved word.
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.qual'

class Ob(models.Model):
    dno = models.ForeignKey(Dsc, unique=True, db_column='dno', related_name='parentdnOb')
    ob = models.CharField(unique=True, max_length=30)
    acid = models.ForeignKey(Acc, unique=True, db_column='acid', related_name='parentaccOb')
    eno = models.ForeignKey(Eval, unique=True, db_column='eno', related_name='parentevalOb')
    qno = models.ForeignKey(Qual, unique=True, null=True, db_column='qno', blank=True, related_name='parentqualOb')
    ivid = models.ForeignKey(Iv, unique=True, null=True, db_column='ivid', blank=True, related_name='parentivOb')
    orgvalue = models.CharField(max_length=30, blank=True)
    freq = models.FloatField(null=True, blank=True)
    mean = models.IntegerField(null=True, blank=True)
    high = models.IntegerField(null=True, blank=True)
    low = models.IntegerField(null=True, blank=True)
    sdev = models.IntegerField(null=True, blank=True)
    ssize = models.IntegerField(null=True, blank=True)
    cmt = models.CharField(max_length=500, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    obno = models.IntegerField(primary_key=True)
    rank = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.ob'

class Oi(models.Model):
    orno = models.ForeignKey(Ord, unique=True, null=True, db_column='orno', blank=True, related_name='parentordOi')
    oino = models.IntegerField(unique=True, null=True, blank=True)
    item = models.CharField(max_length=40, blank=True)
    quant = models.IntegerField(null=True, blank=True)
    units = models.CharField(max_length=2, blank=True)
    dform = models.CharField(max_length=2, blank=True)
    rest = models.CharField(max_length=10, blank=True)
    status = models.CharField(max_length=10, blank=True)
    acted = models.DateField(null=True, blank=True)
    cno = models.ForeignKey(Coop, null=True, db_column='cno', blank=True, related_name='parentcnOi')
    ivid = models.ForeignKey(Iv, null=True, db_column='ivid', blank=True, related_name='parentivOi')
    acid = models.ForeignKey(Acc, null=True, db_column='acid', blank=True, related_name='parentaccOi')
    taxno = models.ForeignKey(Tax, null=True, db_column='taxno', blank=True, related_name='parenttaxOi')
    taxon = models.CharField(max_length=100, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    itno = models.IntegerField(primary_key=True)
    class Meta:
        db_table = u'prod.oi'

class Ped(models.Model):
    acid = models.ForeignKey(Acc, primary_key=True, db_column='acid', related_name='parentaccPed')
    released = models.DateField(null=True, blank=True)
    datefmt = models.CharField(max_length=10, blank=True)
    citno = models.ForeignKey(Acit, null=True, db_column='citno', blank=True, related_name='parentacitPed')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    pedigree = models.CharField(max_length=2000, blank=True)
    class Meta:
        db_table = u'prod.ped'


class Pt(models.Model):
    ivid = models.ForeignKey(Iv, unique=True, db_column='ivid', related_name='parentivPt')
    pttype = models.CharField(unique=True, max_length=10)
    ptcode = models.CharField(unique=True, max_length=10)
    began = models.DateField(null=True, blank=True)
    finished = models.DateField(unique=True, null=True, blank=True)
    results = models.CharField(max_length=10, blank=True)
    needed = models.IntegerField(null=True, blank=True)
    started = models.IntegerField(null=True, blank=True)
    completed = models.IntegerField(null=True, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.pt'


class Quar(models.Model):
    acid = models.ForeignKey(Acc, primary_key=True, db_column='acid', related_name='parentaccQuar')
    qtype = models.CharField(max_length=10, primary_key=True)
    status = models.CharField(max_length=10, blank=True)
    cno = models.ForeignKey(Coop, db_column='cno', related_name='parentcnQuar')
    entered = models.DateField(null=True, blank=True)
    establish = models.DateField(null=True, blank=True)
    expected = models.DateField(null=True, blank=True)
    released = models.DateField(null=True, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    site = models.ForeignKey(MainSite, null=True, db_column='site', blank=True, related_name='parentsiteQuar')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.quar'



class Smbr(models.Model):
    srcno = models.ForeignKey(Src, primary_key=True, db_column='srcno', related_name='parentsrcSmbr')
    acid = models.ForeignKey(Acc, db_column='acid', related_name='parentaccSmbr')
    cno = models.ForeignKey(Coop, primary_key=True, db_column='cno', related_name='parentcnSmbr')
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.smbr'

class SqlOperators(models.Model):
    oper = models.CharField(max_length=12, blank=True)
    seqno = models.IntegerField(null=True, blank=True)
    class Meta:
        db_table = u'prod.sql_operators'


class Taut(models.Model):
    shortaut = models.CharField(max_length=30, primary_key=True)
    longaut = models.CharField(max_length=100, blank=True)
    smarkaut = models.CharField(max_length=30, blank=True)
    lmarkaut = models.CharField(max_length=100, blank=True)
    shexpaut = models.CharField(max_length=30, blank=True)
    lgexpaut = models.CharField(max_length=100, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10)
    created = models.DateField()
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.taut'



class Tcit(models.Model):
    citno = models.IntegerField(primary_key=True)
    taxno = models.ForeignKey(Tax, db_column='taxno', related_name='parenttaxTcit')
    abbr = models.ForeignKey(Lit, null=True, db_column='abbr', blank=True, related_name='parentlitTcit')
    cittitle = models.CharField(max_length=240, blank=True)
    author = models.CharField(max_length=240, blank=True)
    cityr = models.IntegerField(null=True, blank=True)
    citref = models.CharField(max_length=60, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.tcit'

class Turl(models.Model):
    turlno = models.IntegerField(primary_key=True)
    urltype = models.CharField(max_length=10)
    famno = models.ForeignKey(Fam, db_column='famno', related_name='parentfamTurl')
    gno = models.ForeignKey(Gn, null=True, db_column='gno', blank=True, related_name='parentgnTurl')
    taxno = models.ForeignKey(Tax, null=True, db_column='taxno', blank=True, related_name='parenttaxTurl')
    caption = models.CharField(max_length=240, blank=True)
    url = models.CharField(max_length=100)
    site = models.ForeignKey(MainSite, db_column='site', related_name='parentsiteTurl')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10)
    created = models.DateField()
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.turl'

class Uses(models.Model):
    taxno = models.ForeignKey(Tax, primary_key=True, db_column='taxno', related_name='parenttaxUses')
    taxuse = models.CharField(max_length=10, primary_key=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    usetype = models.CharField(max_length=250, blank=True)
    class Meta:
        db_table = u'prod.uses'

class Via(models.Model):
    viano = models.IntegerField(primary_key=True)
    tested = models.DateField()
    datefmt = models.CharField(max_length=10, blank=True)
    norm = models.IntegerField(null=True, blank=True)
    abnorm = models.IntegerField(null=True, blank=True)
    dormant = models.IntegerField(null=True, blank=True)
    viable = models.IntegerField(null=True, blank=True)
    vigor = models.CharField(max_length=10, blank=True)
    sample = models.IntegerField(null=True, blank=True)
    reps = models.IntegerField(null=True, blank=True)
    ivid = models.ForeignKey(Iv, db_column='ivid', related_name='parentivVia')
    eno = models.ForeignKey(Eval, null=True, db_column='eno', blank=True, related_name='parentevalVia')
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    class Meta:
        db_table = u'prod.via'

class Vou(models.Model):
    vno = models.IntegerField(primary_key=True)
    acid = models.ForeignKey(Acc, unique=True, db_column='acid', related_name='parentaccVou')
    vtype = models.CharField(unique=True, max_length=10)
    ivid = models.ForeignKey(Iv, unique=True, null=True, db_column='ivid', blank=True, related_name='parentivVou')
    cno = models.ForeignKey(Coop, unique=True, null=True, db_column='cno', blank=True, related_name='parentcoopVou')
    vouchered = models.DateField(unique=True, null=True, blank=True)
    datefmt = models.CharField(max_length=10, blank=True)
    collid = models.CharField(unique=True, max_length=40, blank=True)
    vloc = models.CharField(unique=True, max_length=500)
    vcontent = models.CharField(max_length=100, blank=True)
    cmt = models.CharField(max_length=240, blank=True)
    userid = models.CharField(max_length=10, blank=True)
    created = models.DateField(null=True, blank=True)
    modified = models.DateField(null=True, blank=True)
    thumbnail = models.CharField(max_length=500, blank=True)
    class Meta:
        db_table = u'prod.vou'
#"""





# security classes
class SecUser(models.Model):
    user_name = models.CharField(max_length=100, unique=True)
    password = models.CharField(max_length=100)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_user'


class SecUserCn(models.Model):
    user = models.ForeignKey(SecUser, db_column='user_id')
    cn = models.ForeignKey(Cn, db_column='cn_id')
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_user_cn'

class SecUserCnPermTemplate(models.Model):
    usercn = models.ForeignKey(SecUserCn, db_column='user_cn_id')
    template = models.ForeignKey(SecPermTemplate, db_column='perm_template_id')
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_user_cn_perm_template'

class SecUserCnPerm(models.Model):
    usercn = models.ForeignKey(SecUserCn, db_column='user_cn_id')
    perm = models.ForeignKey(SecPerm, db_column='perm_id')
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_user_cn_perm'


class SecPerm(models.Model):
    description = models.CharField(max_length=100)
    table_name = models.CharField(max_length=50)
    logic_class_name = models.CharField(max_length=100, null=True)
    create_perm = models.CharField(max_length=1, null=True)
    read_perm = models.CharField(max_length=1, null=True)
    update_perm = models.CharField(max_length=1, null=True)
    delete_perm = models.CharField(max_length=1, null=True)
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_perm'

class SecPermField(models.Model):
    perm = models.ForeignKey(SecPerm, db_column='perm_id')
    field_name = models.CharField(max_length=50)
    compare_type = models.CharField(max_length=20)
    compare_value = models.CharField(max_length=200)
    compare_field_name = models.CharField(max_length=50)
    info_message = models.CharField(max_length=500)
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_perm_field'


class SecPermTemplate(models.Model):
    template_name = models.CharField(max_length=100)
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_perm_template'

class SecPermTemplatePerm(models.Model):
    template = models.ForeignKey(SecPermTemplate, db_column='template_id')
    perm = models.ForeignKey(SecPerm, db_column='perm_id')
    status_flag = models.CharField(max_length=1)  # A=active, I=Inactive
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(SecUser, db_column='created_by')
    modified_at = models.DateTimeField()
    modified_by = models.ForeignKey(SecUser, db_column='modified_by')
    owned_at = models.DateTimeField()
    owned_by = models.ForeignKey(SecUser, db_column='owned_by')
    class Meta:
        db_table = u'prod.sec_perm_template_perm'

        
if __name__ == 'main':
    pass
