//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FieldMapperTest.SearchSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hit", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial struct Hit : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FieldMapperTest.SearchSvc.HitField> FieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KeywordIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrimaryKeyIDField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FieldMapperTest.SearchSvc.HitField> Fields {
            get {
                return this.FieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldsField, value) != true)) {
                    this.FieldsField = value;
                    this.RaisePropertyChanged("Fields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KeywordIndex {
            get {
                return this.KeywordIndexField;
            }
            set {
                if ((this.KeywordIndexField.Equals(value) != true)) {
                    this.KeywordIndexField = value;
                    this.RaisePropertyChanged("KeywordIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrimaryKeyID {
            get {
                return this.PrimaryKeyIDField;
            }
            set {
                if ((this.PrimaryKeyIDField.Equals(value) != true)) {
                    this.PrimaryKeyIDField = value;
                    this.RaisePropertyChanged("PrimaryKeyID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HitField", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial struct HitField : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldOrdinalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldOrdinal {
            get {
                return this.FieldOrdinalField;
            }
            set {
                if ((this.FieldOrdinalField.Equals(value) != true)) {
                    this.FieldOrdinalField = value;
                    this.RaisePropertyChanged("FieldOrdinal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexReport", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class IndexReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FieldMapperTest.SearchSvc.ResolverReport> ResolversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SqlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoaded {
            get {
                return this.IsLoadedField;
            }
            set {
                if ((this.IsLoadedField.Equals(value) != true)) {
                    this.IsLoadedField = value;
                    this.RaisePropertyChanged("IsLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FieldMapperTest.SearchSvc.ResolverReport> Resolvers {
            get {
                return this.ResolversField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolversField, value) != true)) {
                    this.ResolversField = value;
                    this.RaisePropertyChanged("Resolvers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sql {
            get {
                return this.SqlField;
            }
            set {
                if ((object.ReferenceEquals(this.SqlField, value) != true)) {
                    this.SqlField = value;
                    this.RaisePropertyChanged("Sql");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolverReport", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class ResolverReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForeignKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolvedPrimaryKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SqlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ForeignKeyField {
            get {
                return this.ForeignKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ForeignKeyFieldField, value) != true)) {
                    this.ForeignKeyFieldField = value;
                    this.RaisePropertyChanged("ForeignKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoaded {
            get {
                return this.IsLoadedField;
            }
            set {
                if ((this.IsLoadedField.Equals(value) != true)) {
                    this.IsLoadedField = value;
                    this.RaisePropertyChanged("IsLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryKeyField {
            get {
                return this.PrimaryKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryKeyFieldField, value) != true)) {
                    this.PrimaryKeyFieldField = value;
                    this.RaisePropertyChanged("PrimaryKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolvedPrimaryKeyField {
            get {
                return this.ResolvedPrimaryKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedPrimaryKeyFieldField, value) != true)) {
                    this.ResolvedPrimaryKeyFieldField = value;
                    this.RaisePropertyChanged("ResolvedPrimaryKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sql {
            get {
                return this.SqlField;
            }
            set {
                if ((object.ReferenceEquals(this.SqlField, value) != true)) {
                    this.SqlField = value;
                    this.RaisePropertyChanged("Sql");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateRow", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class UpdateRow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<FieldMapperTest.SearchSvc.FieldValue> ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<FieldMapperTest.SearchSvc.FieldValue> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FieldValue", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.Hit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FieldMapperTest.SearchSvc.Hit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.HitField>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FieldMapperTest.SearchSvc.HitField))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.IndexReport>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FieldMapperTest.SearchSvc.IndexReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.ResolverReport>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FieldMapperTest.SearchSvc.ResolverReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.UpdateRow>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FieldMapperTest.SearchSvc.UpdateRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<FieldMapperTest.SearchSvc.FieldValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DBNull))]
    public partial class FieldValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object OriginalValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object OriginalValue {
            get {
                return this.OriginalValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalValueField, value) != true)) {
                    this.OriginalValueField = value;
                    this.RaisePropertyChanged("OriginalValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.grin-global.org/", ConfigurationName="SearchSvc.ISearchHost")]
    public interface ISearchHost {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/Search", ReplyAction="http://www.grin-global.org/ISearchHost/SearchResponse")]
        System.Collections.Generic.List<int> Search(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/SearchForHits", ReplyAction="http://www.grin-global.org/ISearchHost/SearchForHitsResponse")]
        System.Collections.Generic.List<FieldMapperTest.SearchSvc.Hit> SearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/RotateIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/RotateIndexesResponse")]
        void RotateIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ListIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ListIndexesResponse")]
        System.Collections.Generic.List<string> ListIndexes(bool enabledOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/GetLatestMessages", ReplyAction="http://www.grin-global.org/ISearchHost/GetLatestMessagesResponse")]
        string GetLatestMessages(int maxMessages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/VerifyIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/VerifyIndexesResponse")]
        System.Collections.Generic.List<string> VerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/CreateIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/CreateIndexesResponse")]
        void CreateIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/EnableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/EnableIndexesResponse")]
        void EnableIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/DisableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DisableIndexesResponse")]
        void DisableIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ReloadIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReloadIndexesResponse")]
        void ReloadIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ReportOnIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReportOnIndexesResponse")]
        System.Collections.Generic.List<FieldMapperTest.SearchSvc.IndexReport> ReportOnIndexes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/Ping", ReplyAction="http://www.grin-global.org/ISearchHost/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/UpdateIndex", ReplyAction="http://www.grin-global.org/ISearchHost/UpdateIndexResponse")]
        void UpdateIndex(string indexName, System.Collections.Generic.List<FieldMapperTest.SearchSvc.UpdateRow> rows);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISearchHostChannel : FieldMapperTest.SearchSvc.ISearchHost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SearchHostClient : System.ServiceModel.ClientBase<FieldMapperTest.SearchSvc.ISearchHost>, FieldMapperTest.SearchSvc.ISearchHost {
        
        public SearchHostClient() {
        }
        
        public SearchHostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchHostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchHostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchHostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<int> Search(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit) {
            return base.Channel.Search(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, offset, limit);
        }
        
        public System.Collections.Generic.List<FieldMapperTest.SearchSvc.Hit> SearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, int offset, int limit) {
            return base.Channel.SearchForHits(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, offset, limit);
        }
        
        public void RotateIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.RotateIndexes(indexNames);
        }
        
        public System.Collections.Generic.List<string> ListIndexes(bool enabledOnly) {
            return base.Channel.ListIndexes(enabledOnly);
        }
        
        public string GetLatestMessages(int maxMessages) {
            return base.Channel.GetLatestMessages(maxMessages);
        }
        
        public System.Collections.Generic.List<string> VerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves) {
            return base.Channel.VerifyIndexes(indexNames, checkLeaves);
        }
        
        public void CreateIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete) {
            base.Channel.CreateIndexes(indexNames, onlyIfEnabled, rotateInOnComplete);
        }
        
        public void EnableIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.EnableIndexes(indexNames);
        }
        
        public void DisableIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.DisableIndexes(indexNames);
        }
        
        public void ReloadIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.ReloadIndexes(indexNames);
        }
        
        public System.Collections.Generic.List<FieldMapperTest.SearchSvc.IndexReport> ReportOnIndexes() {
            return base.Channel.ReportOnIndexes();
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        public void UpdateIndex(string indexName, System.Collections.Generic.List<FieldMapperTest.SearchSvc.UpdateRow> rows) {
            base.Channel.UpdateIndex(indexName, rows);
        }
    }
}
