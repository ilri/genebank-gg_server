//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrinGlobal.Business.SearchSvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolvedHitData", Namespace="http://schemas.datacontract.org/2004/07/GrinGlobal.Search.Engine")]
    [System.SerializableAttribute()]
    public partial class ResolvedHitData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndexNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KeywordIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PrimaryKeyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> ResolvedIDListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndexName {
            get {
                return this.IndexNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IndexNameField, value) != true)) {
                    this.IndexNameField = value;
                    this.RaisePropertyChanged("IndexName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KeywordIndex {
            get {
                return this.KeywordIndexField;
            }
            set {
                if ((this.KeywordIndexField.Equals(value) != true)) {
                    this.KeywordIndexField = value;
                    this.RaisePropertyChanged("KeywordIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrimaryKeyID {
            get {
                return this.PrimaryKeyIDField;
            }
            set {
                if ((this.PrimaryKeyIDField.Equals(value) != true)) {
                    this.PrimaryKeyIDField = value;
                    this.RaisePropertyChanged("PrimaryKeyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> ResolvedIDList {
            get {
                return this.ResolvedIDListField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedIDListField, value) != true)) {
                    this.ResolvedIDListField = value;
                    this.RaisePropertyChanged("ResolvedIDList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IndexReport", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class IndexReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolverReport> ResolversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SqlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoaded {
            get {
                return this.IsLoadedField;
            }
            set {
                if ((this.IsLoadedField.Equals(value) != true)) {
                    this.IsLoadedField = value;
                    this.RaisePropertyChanged("IsLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolverReport> Resolvers {
            get {
                return this.ResolversField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolversField, value) != true)) {
                    this.ResolversField = value;
                    this.RaisePropertyChanged("Resolvers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sql {
            get {
                return this.SqlField;
            }
            set {
                if ((object.ReferenceEquals(this.SqlField, value) != true)) {
                    this.SqlField = value;
                    this.RaisePropertyChanged("Sql");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResolverReport", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class ResolverReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ForeignKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLoadedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolvedPrimaryKeyFieldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SqlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ForeignKeyField {
            get {
                return this.ForeignKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ForeignKeyFieldField, value) != true)) {
                    this.ForeignKeyFieldField = value;
                    this.RaisePropertyChanged("ForeignKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled {
            get {
                return this.IsEnabledField;
            }
            set {
                if ((this.IsEnabledField.Equals(value) != true)) {
                    this.IsEnabledField = value;
                    this.RaisePropertyChanged("IsEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLoaded {
            get {
                return this.IsLoadedField;
            }
            set {
                if ((this.IsLoadedField.Equals(value) != true)) {
                    this.IsLoadedField = value;
                    this.RaisePropertyChanged("IsLoaded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryKeyField {
            get {
                return this.PrimaryKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryKeyFieldField, value) != true)) {
                    this.PrimaryKeyFieldField = value;
                    this.RaisePropertyChanged("PrimaryKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolvedPrimaryKeyField {
            get {
                return this.ResolvedPrimaryKeyFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedPrimaryKeyFieldField, value) != true)) {
                    this.ResolvedPrimaryKeyFieldField = value;
                    this.RaisePropertyChanged("ResolvedPrimaryKeyField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sql {
            get {
                return this.SqlField;
            }
            set {
                if ((object.ReferenceEquals(this.SqlField, value) != true)) {
                    this.SqlField = value;
                    this.RaisePropertyChanged("Sql");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateRow", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    public partial class UpdateRow : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GrinGlobal.Business.SearchSvc.UpdateMode ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.FieldValue> ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GrinGlobal.Business.SearchSvc.UpdateMode Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.FieldValue> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateMode", Namespace="http://www.grin-global.org")]
    public enum UpdateMode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Add = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Replace = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Subtract = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FieldValue", Namespace="http://www.grin-global.org")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GrinGlobal.Business.SearchSvc.ResolvedHitData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GrinGlobal.Business.SearchSvc.IndexReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolverReport>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GrinGlobal.Business.SearchSvc.ResolverReport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GrinGlobal.Business.SearchSvc.UpdateRow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(GrinGlobal.Business.SearchSvc.UpdateMode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.FieldValue>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.DBNull))]
    public partial class FieldValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object NewValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object OriginalValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object NewValue {
            get {
                return this.NewValueField;
            }
            set {
                if ((object.ReferenceEquals(this.NewValueField, value) != true)) {
                    this.NewValueField = value;
                    this.RaisePropertyChanged("NewValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object OriginalValue {
            get {
                return this.OriginalValueField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalValueField, value) != true)) {
                    this.OriginalValueField = value;
                    this.RaisePropertyChanged("OriginalValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.grin-global.org/", ConfigurationName="SearchSvc.ISearchHost")]
    public interface ISearchHost {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/Search", ReplyAction="http://www.grin-global.org/ISearchHost/SearchResponse")]
        string Search(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/Search", ReplyAction="http://www.grin-global.org/ISearchHost/SearchResponse")]
        System.IAsyncResult BeginSearch(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options, System.AsyncCallback callback, object asyncState);
        
        string EndSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/SearchForHits", ReplyAction="http://www.grin-global.org/ISearchHost/SearchForHitsResponse")]
        System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> SearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/SearchForHits", ReplyAction="http://www.grin-global.org/ISearchHost/SearchForHitsResponse")]
        System.IAsyncResult BeginSearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> EndSearchForHits(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/RotateIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/RotateIndexesResponse")]
        void RotateIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/RotateIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/RotateIndexesResponse")]
        System.IAsyncResult BeginRotateIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState);
        
        void EndRotateIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ListIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ListIndexesResponse")]
        System.Collections.Generic.List<string> ListIndexes(bool enabledOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/ListIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ListIndexesResponse")]
        System.IAsyncResult BeginListIndexes(bool enabledOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndListIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/GetInfo", ReplyAction="http://www.grin-global.org/ISearchHost/GetInfoResponse")]
        string GetInfo(bool enabledIndexesOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/GetInfo", ReplyAction="http://www.grin-global.org/ISearchHost/GetInfoResponse")]
        System.IAsyncResult BeginGetInfo(bool enabledIndexesOnly, System.AsyncCallback callback, object asyncState);
        
        string EndGetInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/GetInfoEx", ReplyAction="http://www.grin-global.org/ISearchHost/GetInfoExResponse")]
        string GetInfoEx(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/GetInfoEx", ReplyAction="http://www.grin-global.org/ISearchHost/GetInfoExResponse")]
        System.IAsyncResult BeginGetInfoEx(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver, System.AsyncCallback callback, object asyncState);
        
        string EndGetInfoEx(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/GetStatus", ReplyAction="http://www.grin-global.org/ISearchHost/GetStatusResponse")]
        string GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/GetStatus", ReplyAction="http://www.grin-global.org/ISearchHost/GetStatusResponse")]
        System.IAsyncResult BeginGetStatus(System.AsyncCallback callback, object asyncState);
        
        string EndGetStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/GetLatestMessages", ReplyAction="http://www.grin-global.org/ISearchHost/GetLatestMessagesResponse")]
        string GetLatestMessages(int maxMessages);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/GetLatestMessages", ReplyAction="http://www.grin-global.org/ISearchHost/GetLatestMessagesResponse")]
        System.IAsyncResult BeginGetLatestMessages(int maxMessages, System.AsyncCallback callback, object asyncState);
        
        string EndGetLatestMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/VerifyIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/VerifyIndexesResponse")]
        System.Collections.Generic.List<string> VerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/VerifyIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/VerifyIndexesResponse")]
        System.IAsyncResult BeginVerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<string> EndVerifyIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/RebuildIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/RebuildIndexesResponse")]
        void RebuildIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/RebuildIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/RebuildIndexesResponse")]
        System.IAsyncResult BeginRebuildIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete, System.AsyncCallback callback, object asyncState);
        
        void EndRebuildIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/EnableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/EnableIndexesResponse")]
        void EnableIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/EnableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/EnableIndexesResponse")]
        System.IAsyncResult BeginEnableIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState);
        
        void EndEnableIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/DisableResolver", ReplyAction="http://www.grin-global.org/ISearchHost/DisableResolverResponse")]
        void DisableResolver(string indexName, string reseolverName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/DisableResolver", ReplyAction="http://www.grin-global.org/ISearchHost/DisableResolverResponse")]
        System.IAsyncResult BeginDisableResolver(string indexName, string reseolverName, System.AsyncCallback callback, object asyncState);
        
        void EndDisableResolver(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/EnableResolver", ReplyAction="http://www.grin-global.org/ISearchHost/EnableResolverResponse")]
        void EnableResolver(string indexName, string reseolverName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/EnableResolver", ReplyAction="http://www.grin-global.org/ISearchHost/EnableResolverResponse")]
        System.IAsyncResult BeginEnableResolver(string indexName, string reseolverName, System.AsyncCallback callback, object asyncState);
        
        void EndEnableResolver(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/SaveResolverSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveResolverSettingsResponse")]
        void SaveResolverSettings(string ds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/SaveResolverSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveResolverSettingsResponse")]
        System.IAsyncResult BeginSaveResolverSettings(string ds, System.AsyncCallback callback, object asyncState);
        
        void EndSaveResolverSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/SaveIndexSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveIndexSettingsResponse")]
        void SaveIndexSettings(string ds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/SaveIndexSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveIndexSettingsResponse")]
        System.IAsyncResult BeginSaveIndexSettings(string ds, System.AsyncCallback callback, object asyncState);
        
        void EndSaveIndexSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/SaveIndexerSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveIndexerSettingsResponse")]
        void SaveIndexerSettings(string ds);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/SaveIndexerSettings", ReplyAction="http://www.grin-global.org/ISearchHost/SaveIndexerSettingsResponse")]
        System.IAsyncResult BeginSaveIndexerSettings(string ds, System.AsyncCallback callback, object asyncState);
        
        void EndSaveIndexerSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/DisableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DisableIndexesResponse")]
        void DisableIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/DisableIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DisableIndexesResponse")]
        System.IAsyncResult BeginDisableIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState);
        
        void EndDisableIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/DeleteIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DeleteIndexesResponse")]
        void DeleteIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/DeleteIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DeleteIndexesResponse")]
        System.IAsyncResult BeginDeleteIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ReloadIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReloadIndexesResponse")]
        void ReloadIndexes(System.Collections.Generic.List<string> indexNames);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/ReloadIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReloadIndexesResponse")]
        System.IAsyncResult BeginReloadIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState);
        
        void EndReloadIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/ReportOnIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReportOnIndexesResponse")]
        System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> ReportOnIndexes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/ReportOnIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/ReportOnIndexesResponse")]
        System.IAsyncResult BeginReportOnIndexes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> EndReportOnIndexes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/Ping", ReplyAction="http://www.grin-global.org/ISearchHost/PingResponse")]
        bool Ping();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/Ping", ReplyAction="http://www.grin-global.org/ISearchHost/PingResponse")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        bool EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/UpdateIndex", ReplyAction="http://www.grin-global.org/ISearchHost/UpdateIndexResponse")]
        void UpdateIndex(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/UpdateIndex", ReplyAction="http://www.grin-global.org/ISearchHost/UpdateIndexResponse")]
        System.IAsyncResult BeginUpdateIndex(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateIndex(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/UpdateIndexRow", ReplyAction="http://www.grin-global.org/ISearchHost/UpdateIndexRowResponse")]
        void UpdateIndexRow(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/UpdateIndexRow", ReplyAction="http://www.grin-global.org/ISearchHost/UpdateIndexRowResponse")]
        System.IAsyncResult BeginUpdateIndexRow(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateIndexRow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.grin-global.org/ISearchHost/DefragIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DefragIndexesResponse")]
        void DefragIndexes(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.grin-global.org/ISearchHost/DefragIndexes", ReplyAction="http://www.grin-global.org/ISearchHost/DefragIndexesResponse")]
        System.IAsyncResult BeginDefragIndexes(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete, System.AsyncCallback callback, object asyncState);
        
        void EndDefragIndexes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISearchHostChannel : GrinGlobal.Business.SearchSvc.ISearchHost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SearchForHitsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchForHitsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ListIndexesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ListIndexesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetInfoExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetLatestMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class VerifyIndexesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VerifyIndexesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ReportOnIndexesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReportOnIndexesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SearchHostClient : System.ServiceModel.ClientBase<GrinGlobal.Business.SearchSvc.ISearchHost>, GrinGlobal.Business.SearchSvc.ISearchHost {
        
        private BeginOperationDelegate onBeginSearchDelegate;
        
        private EndOperationDelegate onEndSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSearchForHitsDelegate;
        
        private EndOperationDelegate onEndSearchForHitsDelegate;
        
        private System.Threading.SendOrPostCallback onSearchForHitsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRotateIndexesDelegate;
        
        private EndOperationDelegate onEndRotateIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onRotateIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginListIndexesDelegate;
        
        private EndOperationDelegate onEndListIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onListIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInfoDelegate;
        
        private EndOperationDelegate onEndGetInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInfoExDelegate;
        
        private EndOperationDelegate onEndGetInfoExDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoExCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStatusDelegate;
        
        private EndOperationDelegate onEndGetStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestMessagesDelegate;
        
        private EndOperationDelegate onEndGetLatestMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginVerifyIndexesDelegate;
        
        private EndOperationDelegate onEndVerifyIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onVerifyIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRebuildIndexesDelegate;
        
        private EndOperationDelegate onEndRebuildIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onRebuildIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableIndexesDelegate;
        
        private EndOperationDelegate onEndEnableIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onEnableIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableResolverDelegate;
        
        private EndOperationDelegate onEndDisableResolverDelegate;
        
        private System.Threading.SendOrPostCallback onDisableResolverCompletedDelegate;
        
        private BeginOperationDelegate onBeginEnableResolverDelegate;
        
        private EndOperationDelegate onEndEnableResolverDelegate;
        
        private System.Threading.SendOrPostCallback onEnableResolverCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveResolverSettingsDelegate;
        
        private EndOperationDelegate onEndSaveResolverSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveResolverSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveIndexSettingsDelegate;
        
        private EndOperationDelegate onEndSaveIndexSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveIndexSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveIndexerSettingsDelegate;
        
        private EndOperationDelegate onEndSaveIndexerSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveIndexerSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisableIndexesDelegate;
        
        private EndOperationDelegate onEndDisableIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onDisableIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteIndexesDelegate;
        
        private EndOperationDelegate onEndDeleteIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginReloadIndexesDelegate;
        
        private EndOperationDelegate onEndReloadIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onReloadIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginReportOnIndexesDelegate;
        
        private EndOperationDelegate onEndReportOnIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onReportOnIndexesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateIndexDelegate;
        
        private EndOperationDelegate onEndUpdateIndexDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateIndexCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateIndexRowDelegate;
        
        private EndOperationDelegate onEndUpdateIndexRowDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateIndexRowCompletedDelegate;
        
        private BeginOperationDelegate onBeginDefragIndexesDelegate;
        
        private EndOperationDelegate onEndDefragIndexesDelegate;
        
        private System.Threading.SendOrPostCallback onDefragIndexesCompletedDelegate;
        
        public SearchHostClient() {
        }
        
        public SearchHostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchHostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchHostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchHostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<SearchCompletedEventArgs> SearchCompleted;
        
        public event System.EventHandler<SearchForHitsCompletedEventArgs> SearchForHitsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RotateIndexesCompleted;
        
        public event System.EventHandler<ListIndexesCompletedEventArgs> ListIndexesCompleted;
        
        public event System.EventHandler<GetInfoCompletedEventArgs> GetInfoCompleted;
        
        public event System.EventHandler<GetInfoExCompletedEventArgs> GetInfoExCompleted;
        
        public event System.EventHandler<GetStatusCompletedEventArgs> GetStatusCompleted;
        
        public event System.EventHandler<GetLatestMessagesCompletedEventArgs> GetLatestMessagesCompleted;
        
        public event System.EventHandler<VerifyIndexesCompletedEventArgs> VerifyIndexesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RebuildIndexesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnableIndexesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisableResolverCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EnableResolverCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveResolverSettingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveIndexSettingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveIndexerSettingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisableIndexesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteIndexesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ReloadIndexesCompleted;
        
        public event System.EventHandler<ReportOnIndexesCompletedEventArgs> ReportOnIndexesCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateIndexCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateIndexRowCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DefragIndexesCompleted;
        
        public string Search(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options) {
            return base.Channel.Search(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, offset, limit, ds, options);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearch(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearch(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, offset, limit, ds, options, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSearch(System.IAsyncResult result) {
            return base.Channel.EndSearch(result);
        }
        
        private System.IAsyncResult OnBeginSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string searchString = ((string)(inValues[0]));
            bool ignoreCase = ((bool)(inValues[1]));
            bool autoAndConsecutiveLiterals = ((bool)(inValues[2]));
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[3]));
            string resolverName = ((string)(inValues[4]));
            int offset = ((int)(inValues[5]));
            int limit = ((int)(inValues[6]));
            string ds = ((string)(inValues[7]));
            string options = ((string)(inValues[8]));
            return this.BeginSearch(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, offset, limit, ds, options, callback, asyncState);
        }
        
        private object[] OnEndSearch(System.IAsyncResult result) {
            string retVal = this.EndSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchCompleted(object state) {
            if ((this.SearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchCompleted(this, new SearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchAsync(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options) {
            this.SearchAsync(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, offset, limit, ds, options, null);
        }
        
        public void SearchAsync(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, int offset, int limit, string ds, string options, object userState) {
            if ((this.onBeginSearchDelegate == null)) {
                this.onBeginSearchDelegate = new BeginOperationDelegate(this.OnBeginSearch);
            }
            if ((this.onEndSearchDelegate == null)) {
                this.onEndSearchDelegate = new EndOperationDelegate(this.OnEndSearch);
            }
            if ((this.onSearchCompletedDelegate == null)) {
                this.onSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSearchDelegate, new object[] {
                        searchString,
                        ignoreCase,
                        autoAndConsecutiveLiterals,
                        indexNames,
                        resolverName,
                        offset,
                        limit,
                        ds,
                        options}, this.onEndSearchDelegate, this.onSearchCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> SearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit) {
            return base.Channel.SearchForHits(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, returnHitsWithNoResolvedIDs, offset, limit);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSearchForHits(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearchForHits(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, returnHitsWithNoResolvedIDs, offset, limit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> EndSearchForHits(System.IAsyncResult result) {
            return base.Channel.EndSearchForHits(result);
        }
        
        private System.IAsyncResult OnBeginSearchForHits(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string searchString = ((string)(inValues[0]));
            bool ignoreCase = ((bool)(inValues[1]));
            bool autoAndConsecutiveLiterals = ((bool)(inValues[2]));
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[3]));
            string resolverName = ((string)(inValues[4]));
            bool returnHitsWithNoResolvedIDs = ((bool)(inValues[5]));
            int offset = ((int)(inValues[6]));
            int limit = ((int)(inValues[7]));
            return this.BeginSearchForHits(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, returnHitsWithNoResolvedIDs, offset, limit, callback, asyncState);
        }
        
        private object[] OnEndSearchForHits(System.IAsyncResult result) {
            System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.ResolvedHitData> retVal = this.EndSearchForHits(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchForHitsCompleted(object state) {
            if ((this.SearchForHitsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchForHitsCompleted(this, new SearchForHitsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchForHitsAsync(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit) {
            this.SearchForHitsAsync(searchString, ignoreCase, autoAndConsecutiveLiterals, indexNames, resolverName, returnHitsWithNoResolvedIDs, offset, limit, null);
        }
        
        public void SearchForHitsAsync(string searchString, bool ignoreCase, bool autoAndConsecutiveLiterals, System.Collections.Generic.List<string> indexNames, string resolverName, bool returnHitsWithNoResolvedIDs, int offset, int limit, object userState) {
            if ((this.onBeginSearchForHitsDelegate == null)) {
                this.onBeginSearchForHitsDelegate = new BeginOperationDelegate(this.OnBeginSearchForHits);
            }
            if ((this.onEndSearchForHitsDelegate == null)) {
                this.onEndSearchForHitsDelegate = new EndOperationDelegate(this.OnEndSearchForHits);
            }
            if ((this.onSearchForHitsCompletedDelegate == null)) {
                this.onSearchForHitsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchForHitsCompleted);
            }
            base.InvokeAsync(this.onBeginSearchForHitsDelegate, new object[] {
                        searchString,
                        ignoreCase,
                        autoAndConsecutiveLiterals,
                        indexNames,
                        resolverName,
                        returnHitsWithNoResolvedIDs,
                        offset,
                        limit}, this.onEndSearchForHitsDelegate, this.onSearchForHitsCompletedDelegate, userState);
        }
        
        public void RotateIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.RotateIndexes(indexNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRotateIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRotateIndexes(indexNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRotateIndexes(System.IAsyncResult result) {
            base.Channel.EndRotateIndexes(result);
        }
        
        private System.IAsyncResult OnBeginRotateIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginRotateIndexes(indexNames, callback, asyncState);
        }
        
        private object[] OnEndRotateIndexes(System.IAsyncResult result) {
            this.EndRotateIndexes(result);
            return null;
        }
        
        private void OnRotateIndexesCompleted(object state) {
            if ((this.RotateIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RotateIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RotateIndexesAsync(System.Collections.Generic.List<string> indexNames) {
            this.RotateIndexesAsync(indexNames, null);
        }
        
        public void RotateIndexesAsync(System.Collections.Generic.List<string> indexNames, object userState) {
            if ((this.onBeginRotateIndexesDelegate == null)) {
                this.onBeginRotateIndexesDelegate = new BeginOperationDelegate(this.OnBeginRotateIndexes);
            }
            if ((this.onEndRotateIndexesDelegate == null)) {
                this.onEndRotateIndexesDelegate = new EndOperationDelegate(this.OnEndRotateIndexes);
            }
            if ((this.onRotateIndexesCompletedDelegate == null)) {
                this.onRotateIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRotateIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginRotateIndexesDelegate, new object[] {
                        indexNames}, this.onEndRotateIndexesDelegate, this.onRotateIndexesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> ListIndexes(bool enabledOnly) {
            return base.Channel.ListIndexes(enabledOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginListIndexes(bool enabledOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginListIndexes(enabledOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndListIndexes(System.IAsyncResult result) {
            return base.Channel.EndListIndexes(result);
        }
        
        private System.IAsyncResult OnBeginListIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            return this.BeginListIndexes(enabledOnly, callback, asyncState);
        }
        
        private object[] OnEndListIndexes(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndListIndexes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnListIndexesCompleted(object state) {
            if ((this.ListIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ListIndexesCompleted(this, new ListIndexesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ListIndexesAsync(bool enabledOnly) {
            this.ListIndexesAsync(enabledOnly, null);
        }
        
        public void ListIndexesAsync(bool enabledOnly, object userState) {
            if ((this.onBeginListIndexesDelegate == null)) {
                this.onBeginListIndexesDelegate = new BeginOperationDelegate(this.OnBeginListIndexes);
            }
            if ((this.onEndListIndexesDelegate == null)) {
                this.onEndListIndexesDelegate = new EndOperationDelegate(this.OnEndListIndexes);
            }
            if ((this.onListIndexesCompletedDelegate == null)) {
                this.onListIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnListIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginListIndexesDelegate, new object[] {
                        enabledOnly}, this.onEndListIndexesDelegate, this.onListIndexesCompletedDelegate, userState);
        }
        
        public string GetInfo(bool enabledIndexesOnly) {
            return base.Channel.GetInfo(enabledIndexesOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInfo(bool enabledIndexesOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfo(enabledIndexesOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetInfo(System.IAsyncResult result) {
            return base.Channel.EndGetInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledIndexesOnly = ((bool)(inValues[0]));
            return this.BeginGetInfo(enabledIndexesOnly, callback, asyncState);
        }
        
        private object[] OnEndGetInfo(System.IAsyncResult result) {
            string retVal = this.EndGetInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoCompleted(object state) {
            if ((this.GetInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoAsync(bool enabledIndexesOnly) {
            this.GetInfoAsync(enabledIndexesOnly, null);
        }
        
        public void GetInfoAsync(bool enabledIndexesOnly, object userState) {
            if ((this.onBeginGetInfoDelegate == null)) {
                this.onBeginGetInfoDelegate = new BeginOperationDelegate(this.OnBeginGetInfo);
            }
            if ((this.onEndGetInfoDelegate == null)) {
                this.onEndGetInfoDelegate = new EndOperationDelegate(this.OnEndGetInfo);
            }
            if ((this.onGetInfoCompletedDelegate == null)) {
                this.onGetInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoDelegate, new object[] {
                        enabledIndexesOnly}, this.onEndGetInfoDelegate, this.onGetInfoCompletedDelegate, userState);
        }
        
        public string GetInfoEx(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver) {
            return base.Channel.GetInfoEx(enabledIndexesOnly, onlyThisIndex, onlyThisResolver);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetInfoEx(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfoEx(enabledIndexesOnly, onlyThisIndex, onlyThisResolver, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetInfoEx(System.IAsyncResult result) {
            return base.Channel.EndGetInfoEx(result);
        }
        
        private System.IAsyncResult OnBeginGetInfoEx(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledIndexesOnly = ((bool)(inValues[0]));
            string onlyThisIndex = ((string)(inValues[1]));
            string onlyThisResolver = ((string)(inValues[2]));
            return this.BeginGetInfoEx(enabledIndexesOnly, onlyThisIndex, onlyThisResolver, callback, asyncState);
        }
        
        private object[] OnEndGetInfoEx(System.IAsyncResult result) {
            string retVal = this.EndGetInfoEx(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoExCompleted(object state) {
            if ((this.GetInfoExCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoExCompleted(this, new GetInfoExCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoExAsync(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver) {
            this.GetInfoExAsync(enabledIndexesOnly, onlyThisIndex, onlyThisResolver, null);
        }
        
        public void GetInfoExAsync(bool enabledIndexesOnly, string onlyThisIndex, string onlyThisResolver, object userState) {
            if ((this.onBeginGetInfoExDelegate == null)) {
                this.onBeginGetInfoExDelegate = new BeginOperationDelegate(this.OnBeginGetInfoEx);
            }
            if ((this.onEndGetInfoExDelegate == null)) {
                this.onEndGetInfoExDelegate = new EndOperationDelegate(this.OnEndGetInfoEx);
            }
            if ((this.onGetInfoExCompletedDelegate == null)) {
                this.onGetInfoExCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoExCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoExDelegate, new object[] {
                        enabledIndexesOnly,
                        onlyThisIndex,
                        onlyThisResolver}, this.onEndGetInfoExDelegate, this.onGetInfoExCompletedDelegate, userState);
        }
        
        public string GetStatus() {
            return base.Channel.GetStatus();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetStatus(System.IAsyncResult result) {
            return base.Channel.EndGetStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetStatus(callback, asyncState);
        }
        
        private object[] OnEndGetStatus(System.IAsyncResult result) {
            string retVal = this.EndGetStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStatusCompleted(object state) {
            if ((this.GetStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStatusCompleted(this, new GetStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStatusAsync() {
            this.GetStatusAsync(null);
        }
        
        public void GetStatusAsync(object userState) {
            if ((this.onBeginGetStatusDelegate == null)) {
                this.onBeginGetStatusDelegate = new BeginOperationDelegate(this.OnBeginGetStatus);
            }
            if ((this.onEndGetStatusDelegate == null)) {
                this.onEndGetStatusDelegate = new EndOperationDelegate(this.OnEndGetStatus);
            }
            if ((this.onGetStatusCompletedDelegate == null)) {
                this.onGetStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetStatusDelegate, null, this.onEndGetStatusDelegate, this.onGetStatusCompletedDelegate, userState);
        }
        
        public string GetLatestMessages(int maxMessages) {
            return base.Channel.GetLatestMessages(maxMessages);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLatestMessages(int maxMessages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestMessages(maxMessages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLatestMessages(System.IAsyncResult result) {
            return base.Channel.EndGetLatestMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int maxMessages = ((int)(inValues[0]));
            return this.BeginGetLatestMessages(maxMessages, callback, asyncState);
        }
        
        private object[] OnEndGetLatestMessages(System.IAsyncResult result) {
            string retVal = this.EndGetLatestMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestMessagesCompleted(object state) {
            if ((this.GetLatestMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestMessagesCompleted(this, new GetLatestMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestMessagesAsync(int maxMessages) {
            this.GetLatestMessagesAsync(maxMessages, null);
        }
        
        public void GetLatestMessagesAsync(int maxMessages, object userState) {
            if ((this.onBeginGetLatestMessagesDelegate == null)) {
                this.onBeginGetLatestMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetLatestMessages);
            }
            if ((this.onEndGetLatestMessagesDelegate == null)) {
                this.onEndGetLatestMessagesDelegate = new EndOperationDelegate(this.OnEndGetLatestMessages);
            }
            if ((this.onGetLatestMessagesCompletedDelegate == null)) {
                this.onGetLatestMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestMessagesDelegate, new object[] {
                        maxMessages}, this.onEndGetLatestMessagesDelegate, this.onGetLatestMessagesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<string> VerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves) {
            return base.Channel.VerifyIndexes(indexNames, checkLeaves);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginVerifyIndexes(System.Collections.Generic.List<string> indexNames, bool checkLeaves, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVerifyIndexes(indexNames, checkLeaves, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<string> EndVerifyIndexes(System.IAsyncResult result) {
            return base.Channel.EndVerifyIndexes(result);
        }
        
        private System.IAsyncResult OnBeginVerifyIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            bool checkLeaves = ((bool)(inValues[1]));
            return this.BeginVerifyIndexes(indexNames, checkLeaves, callback, asyncState);
        }
        
        private object[] OnEndVerifyIndexes(System.IAsyncResult result) {
            System.Collections.Generic.List<string> retVal = this.EndVerifyIndexes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVerifyIndexesCompleted(object state) {
            if ((this.VerifyIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VerifyIndexesCompleted(this, new VerifyIndexesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VerifyIndexesAsync(System.Collections.Generic.List<string> indexNames, bool checkLeaves) {
            this.VerifyIndexesAsync(indexNames, checkLeaves, null);
        }
        
        public void VerifyIndexesAsync(System.Collections.Generic.List<string> indexNames, bool checkLeaves, object userState) {
            if ((this.onBeginVerifyIndexesDelegate == null)) {
                this.onBeginVerifyIndexesDelegate = new BeginOperationDelegate(this.OnBeginVerifyIndexes);
            }
            if ((this.onEndVerifyIndexesDelegate == null)) {
                this.onEndVerifyIndexesDelegate = new EndOperationDelegate(this.OnEndVerifyIndexes);
            }
            if ((this.onVerifyIndexesCompletedDelegate == null)) {
                this.onVerifyIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVerifyIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginVerifyIndexesDelegate, new object[] {
                        indexNames,
                        checkLeaves}, this.onEndVerifyIndexesDelegate, this.onVerifyIndexesCompletedDelegate, userState);
        }
        
        public void RebuildIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete) {
            base.Channel.RebuildIndexes(indexNames, onlyIfEnabled, rotateInOnComplete);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRebuildIndexes(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRebuildIndexes(indexNames, onlyIfEnabled, rotateInOnComplete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRebuildIndexes(System.IAsyncResult result) {
            base.Channel.EndRebuildIndexes(result);
        }
        
        private System.IAsyncResult OnBeginRebuildIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            bool onlyIfEnabled = ((bool)(inValues[1]));
            bool rotateInOnComplete = ((bool)(inValues[2]));
            return this.BeginRebuildIndexes(indexNames, onlyIfEnabled, rotateInOnComplete, callback, asyncState);
        }
        
        private object[] OnEndRebuildIndexes(System.IAsyncResult result) {
            this.EndRebuildIndexes(result);
            return null;
        }
        
        private void OnRebuildIndexesCompleted(object state) {
            if ((this.RebuildIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RebuildIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RebuildIndexesAsync(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete) {
            this.RebuildIndexesAsync(indexNames, onlyIfEnabled, rotateInOnComplete, null);
        }
        
        public void RebuildIndexesAsync(System.Collections.Generic.List<string> indexNames, bool onlyIfEnabled, bool rotateInOnComplete, object userState) {
            if ((this.onBeginRebuildIndexesDelegate == null)) {
                this.onBeginRebuildIndexesDelegate = new BeginOperationDelegate(this.OnBeginRebuildIndexes);
            }
            if ((this.onEndRebuildIndexesDelegate == null)) {
                this.onEndRebuildIndexesDelegate = new EndOperationDelegate(this.OnEndRebuildIndexes);
            }
            if ((this.onRebuildIndexesCompletedDelegate == null)) {
                this.onRebuildIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRebuildIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginRebuildIndexesDelegate, new object[] {
                        indexNames,
                        onlyIfEnabled,
                        rotateInOnComplete}, this.onEndRebuildIndexesDelegate, this.onRebuildIndexesCompletedDelegate, userState);
        }
        
        public void EnableIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.EnableIndexes(indexNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnableIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableIndexes(indexNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEnableIndexes(System.IAsyncResult result) {
            base.Channel.EndEnableIndexes(result);
        }
        
        private System.IAsyncResult OnBeginEnableIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginEnableIndexes(indexNames, callback, asyncState);
        }
        
        private object[] OnEndEnableIndexes(System.IAsyncResult result) {
            this.EndEnableIndexes(result);
            return null;
        }
        
        private void OnEnableIndexesCompleted(object state) {
            if ((this.EnableIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableIndexesAsync(System.Collections.Generic.List<string> indexNames) {
            this.EnableIndexesAsync(indexNames, null);
        }
        
        public void EnableIndexesAsync(System.Collections.Generic.List<string> indexNames, object userState) {
            if ((this.onBeginEnableIndexesDelegate == null)) {
                this.onBeginEnableIndexesDelegate = new BeginOperationDelegate(this.OnBeginEnableIndexes);
            }
            if ((this.onEndEnableIndexesDelegate == null)) {
                this.onEndEnableIndexesDelegate = new EndOperationDelegate(this.OnEndEnableIndexes);
            }
            if ((this.onEnableIndexesCompletedDelegate == null)) {
                this.onEnableIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginEnableIndexesDelegate, new object[] {
                        indexNames}, this.onEndEnableIndexesDelegate, this.onEnableIndexesCompletedDelegate, userState);
        }
        
        public void DisableResolver(string indexName, string reseolverName) {
            base.Channel.DisableResolver(indexName, reseolverName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisableResolver(string indexName, string reseolverName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableResolver(indexName, reseolverName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisableResolver(System.IAsyncResult result) {
            base.Channel.EndDisableResolver(result);
        }
        
        private System.IAsyncResult OnBeginDisableResolver(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string indexName = ((string)(inValues[0]));
            string reseolverName = ((string)(inValues[1]));
            return this.BeginDisableResolver(indexName, reseolverName, callback, asyncState);
        }
        
        private object[] OnEndDisableResolver(System.IAsyncResult result) {
            this.EndDisableResolver(result);
            return null;
        }
        
        private void OnDisableResolverCompleted(object state) {
            if ((this.DisableResolverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableResolverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableResolverAsync(string indexName, string reseolverName) {
            this.DisableResolverAsync(indexName, reseolverName, null);
        }
        
        public void DisableResolverAsync(string indexName, string reseolverName, object userState) {
            if ((this.onBeginDisableResolverDelegate == null)) {
                this.onBeginDisableResolverDelegate = new BeginOperationDelegate(this.OnBeginDisableResolver);
            }
            if ((this.onEndDisableResolverDelegate == null)) {
                this.onEndDisableResolverDelegate = new EndOperationDelegate(this.OnEndDisableResolver);
            }
            if ((this.onDisableResolverCompletedDelegate == null)) {
                this.onDisableResolverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableResolverCompleted);
            }
            base.InvokeAsync(this.onBeginDisableResolverDelegate, new object[] {
                        indexName,
                        reseolverName}, this.onEndDisableResolverDelegate, this.onDisableResolverCompletedDelegate, userState);
        }
        
        public void EnableResolver(string indexName, string reseolverName) {
            base.Channel.EnableResolver(indexName, reseolverName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEnableResolver(string indexName, string reseolverName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnableResolver(indexName, reseolverName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndEnableResolver(System.IAsyncResult result) {
            base.Channel.EndEnableResolver(result);
        }
        
        private System.IAsyncResult OnBeginEnableResolver(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string indexName = ((string)(inValues[0]));
            string reseolverName = ((string)(inValues[1]));
            return this.BeginEnableResolver(indexName, reseolverName, callback, asyncState);
        }
        
        private object[] OnEndEnableResolver(System.IAsyncResult result) {
            this.EndEnableResolver(result);
            return null;
        }
        
        private void OnEnableResolverCompleted(object state) {
            if ((this.EnableResolverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnableResolverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnableResolverAsync(string indexName, string reseolverName) {
            this.EnableResolverAsync(indexName, reseolverName, null);
        }
        
        public void EnableResolverAsync(string indexName, string reseolverName, object userState) {
            if ((this.onBeginEnableResolverDelegate == null)) {
                this.onBeginEnableResolverDelegate = new BeginOperationDelegate(this.OnBeginEnableResolver);
            }
            if ((this.onEndEnableResolverDelegate == null)) {
                this.onEndEnableResolverDelegate = new EndOperationDelegate(this.OnEndEnableResolver);
            }
            if ((this.onEnableResolverCompletedDelegate == null)) {
                this.onEnableResolverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnableResolverCompleted);
            }
            base.InvokeAsync(this.onBeginEnableResolverDelegate, new object[] {
                        indexName,
                        reseolverName}, this.onEndEnableResolverDelegate, this.onEnableResolverCompletedDelegate, userState);
        }
        
        public void SaveResolverSettings(string ds) {
            base.Channel.SaveResolverSettings(ds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveResolverSettings(string ds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveResolverSettings(ds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveResolverSettings(System.IAsyncResult result) {
            base.Channel.EndSaveResolverSettings(result);
        }
        
        private System.IAsyncResult OnBeginSaveResolverSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ds = ((string)(inValues[0]));
            return this.BeginSaveResolverSettings(ds, callback, asyncState);
        }
        
        private object[] OnEndSaveResolverSettings(System.IAsyncResult result) {
            this.EndSaveResolverSettings(result);
            return null;
        }
        
        private void OnSaveResolverSettingsCompleted(object state) {
            if ((this.SaveResolverSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveResolverSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveResolverSettingsAsync(string ds) {
            this.SaveResolverSettingsAsync(ds, null);
        }
        
        public void SaveResolverSettingsAsync(string ds, object userState) {
            if ((this.onBeginSaveResolverSettingsDelegate == null)) {
                this.onBeginSaveResolverSettingsDelegate = new BeginOperationDelegate(this.OnBeginSaveResolverSettings);
            }
            if ((this.onEndSaveResolverSettingsDelegate == null)) {
                this.onEndSaveResolverSettingsDelegate = new EndOperationDelegate(this.OnEndSaveResolverSettings);
            }
            if ((this.onSaveResolverSettingsCompletedDelegate == null)) {
                this.onSaveResolverSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveResolverSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveResolverSettingsDelegate, new object[] {
                        ds}, this.onEndSaveResolverSettingsDelegate, this.onSaveResolverSettingsCompletedDelegate, userState);
        }
        
        public void SaveIndexSettings(string ds) {
            base.Channel.SaveIndexSettings(ds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveIndexSettings(string ds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveIndexSettings(ds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveIndexSettings(System.IAsyncResult result) {
            base.Channel.EndSaveIndexSettings(result);
        }
        
        private System.IAsyncResult OnBeginSaveIndexSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ds = ((string)(inValues[0]));
            return this.BeginSaveIndexSettings(ds, callback, asyncState);
        }
        
        private object[] OnEndSaveIndexSettings(System.IAsyncResult result) {
            this.EndSaveIndexSettings(result);
            return null;
        }
        
        private void OnSaveIndexSettingsCompleted(object state) {
            if ((this.SaveIndexSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveIndexSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveIndexSettingsAsync(string ds) {
            this.SaveIndexSettingsAsync(ds, null);
        }
        
        public void SaveIndexSettingsAsync(string ds, object userState) {
            if ((this.onBeginSaveIndexSettingsDelegate == null)) {
                this.onBeginSaveIndexSettingsDelegate = new BeginOperationDelegate(this.OnBeginSaveIndexSettings);
            }
            if ((this.onEndSaveIndexSettingsDelegate == null)) {
                this.onEndSaveIndexSettingsDelegate = new EndOperationDelegate(this.OnEndSaveIndexSettings);
            }
            if ((this.onSaveIndexSettingsCompletedDelegate == null)) {
                this.onSaveIndexSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveIndexSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveIndexSettingsDelegate, new object[] {
                        ds}, this.onEndSaveIndexSettingsDelegate, this.onSaveIndexSettingsCompletedDelegate, userState);
        }
        
        public void SaveIndexerSettings(string ds) {
            base.Channel.SaveIndexerSettings(ds);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveIndexerSettings(string ds, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveIndexerSettings(ds, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveIndexerSettings(System.IAsyncResult result) {
            base.Channel.EndSaveIndexerSettings(result);
        }
        
        private System.IAsyncResult OnBeginSaveIndexerSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ds = ((string)(inValues[0]));
            return this.BeginSaveIndexerSettings(ds, callback, asyncState);
        }
        
        private object[] OnEndSaveIndexerSettings(System.IAsyncResult result) {
            this.EndSaveIndexerSettings(result);
            return null;
        }
        
        private void OnSaveIndexerSettingsCompleted(object state) {
            if ((this.SaveIndexerSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveIndexerSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveIndexerSettingsAsync(string ds) {
            this.SaveIndexerSettingsAsync(ds, null);
        }
        
        public void SaveIndexerSettingsAsync(string ds, object userState) {
            if ((this.onBeginSaveIndexerSettingsDelegate == null)) {
                this.onBeginSaveIndexerSettingsDelegate = new BeginOperationDelegate(this.OnBeginSaveIndexerSettings);
            }
            if ((this.onEndSaveIndexerSettingsDelegate == null)) {
                this.onEndSaveIndexerSettingsDelegate = new EndOperationDelegate(this.OnEndSaveIndexerSettings);
            }
            if ((this.onSaveIndexerSettingsCompletedDelegate == null)) {
                this.onSaveIndexerSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveIndexerSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveIndexerSettingsDelegate, new object[] {
                        ds}, this.onEndSaveIndexerSettingsDelegate, this.onSaveIndexerSettingsCompletedDelegate, userState);
        }
        
        public void DisableIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.DisableIndexes(indexNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDisableIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisableIndexes(indexNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDisableIndexes(System.IAsyncResult result) {
            base.Channel.EndDisableIndexes(result);
        }
        
        private System.IAsyncResult OnBeginDisableIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginDisableIndexes(indexNames, callback, asyncState);
        }
        
        private object[] OnEndDisableIndexes(System.IAsyncResult result) {
            this.EndDisableIndexes(result);
            return null;
        }
        
        private void OnDisableIndexesCompleted(object state) {
            if ((this.DisableIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisableIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisableIndexesAsync(System.Collections.Generic.List<string> indexNames) {
            this.DisableIndexesAsync(indexNames, null);
        }
        
        public void DisableIndexesAsync(System.Collections.Generic.List<string> indexNames, object userState) {
            if ((this.onBeginDisableIndexesDelegate == null)) {
                this.onBeginDisableIndexesDelegate = new BeginOperationDelegate(this.OnBeginDisableIndexes);
            }
            if ((this.onEndDisableIndexesDelegate == null)) {
                this.onEndDisableIndexesDelegate = new EndOperationDelegate(this.OnEndDisableIndexes);
            }
            if ((this.onDisableIndexesCompletedDelegate == null)) {
                this.onDisableIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisableIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginDisableIndexesDelegate, new object[] {
                        indexNames}, this.onEndDisableIndexesDelegate, this.onDisableIndexesCompletedDelegate, userState);
        }
        
        public void DeleteIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.DeleteIndexes(indexNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteIndexes(indexNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteIndexes(System.IAsyncResult result) {
            base.Channel.EndDeleteIndexes(result);
        }
        
        private System.IAsyncResult OnBeginDeleteIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginDeleteIndexes(indexNames, callback, asyncState);
        }
        
        private object[] OnEndDeleteIndexes(System.IAsyncResult result) {
            this.EndDeleteIndexes(result);
            return null;
        }
        
        private void OnDeleteIndexesCompleted(object state) {
            if ((this.DeleteIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteIndexesAsync(System.Collections.Generic.List<string> indexNames) {
            this.DeleteIndexesAsync(indexNames, null);
        }
        
        public void DeleteIndexesAsync(System.Collections.Generic.List<string> indexNames, object userState) {
            if ((this.onBeginDeleteIndexesDelegate == null)) {
                this.onBeginDeleteIndexesDelegate = new BeginOperationDelegate(this.OnBeginDeleteIndexes);
            }
            if ((this.onEndDeleteIndexesDelegate == null)) {
                this.onEndDeleteIndexesDelegate = new EndOperationDelegate(this.OnEndDeleteIndexes);
            }
            if ((this.onDeleteIndexesCompletedDelegate == null)) {
                this.onDeleteIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteIndexesDelegate, new object[] {
                        indexNames}, this.onEndDeleteIndexesDelegate, this.onDeleteIndexesCompletedDelegate, userState);
        }
        
        public void ReloadIndexes(System.Collections.Generic.List<string> indexNames) {
            base.Channel.ReloadIndexes(indexNames);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReloadIndexes(System.Collections.Generic.List<string> indexNames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReloadIndexes(indexNames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndReloadIndexes(System.IAsyncResult result) {
            base.Channel.EndReloadIndexes(result);
        }
        
        private System.IAsyncResult OnBeginReloadIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            return this.BeginReloadIndexes(indexNames, callback, asyncState);
        }
        
        private object[] OnEndReloadIndexes(System.IAsyncResult result) {
            this.EndReloadIndexes(result);
            return null;
        }
        
        private void OnReloadIndexesCompleted(object state) {
            if ((this.ReloadIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReloadIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReloadIndexesAsync(System.Collections.Generic.List<string> indexNames) {
            this.ReloadIndexesAsync(indexNames, null);
        }
        
        public void ReloadIndexesAsync(System.Collections.Generic.List<string> indexNames, object userState) {
            if ((this.onBeginReloadIndexesDelegate == null)) {
                this.onBeginReloadIndexesDelegate = new BeginOperationDelegate(this.OnBeginReloadIndexes);
            }
            if ((this.onEndReloadIndexesDelegate == null)) {
                this.onEndReloadIndexesDelegate = new EndOperationDelegate(this.OnEndReloadIndexes);
            }
            if ((this.onReloadIndexesCompletedDelegate == null)) {
                this.onReloadIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReloadIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginReloadIndexesDelegate, new object[] {
                        indexNames}, this.onEndReloadIndexesDelegate, this.onReloadIndexesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> ReportOnIndexes() {
            return base.Channel.ReportOnIndexes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginReportOnIndexes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReportOnIndexes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> EndReportOnIndexes(System.IAsyncResult result) {
            return base.Channel.EndReportOnIndexes(result);
        }
        
        private System.IAsyncResult OnBeginReportOnIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginReportOnIndexes(callback, asyncState);
        }
        
        private object[] OnEndReportOnIndexes(System.IAsyncResult result) {
            System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.IndexReport> retVal = this.EndReportOnIndexes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReportOnIndexesCompleted(object state) {
            if ((this.ReportOnIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReportOnIndexesCompleted(this, new ReportOnIndexesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReportOnIndexesAsync() {
            this.ReportOnIndexesAsync(null);
        }
        
        public void ReportOnIndexesAsync(object userState) {
            if ((this.onBeginReportOnIndexesDelegate == null)) {
                this.onBeginReportOnIndexesDelegate = new BeginOperationDelegate(this.OnBeginReportOnIndexes);
            }
            if ((this.onEndReportOnIndexesDelegate == null)) {
                this.onEndReportOnIndexesDelegate = new EndOperationDelegate(this.OnEndReportOnIndexes);
            }
            if ((this.onReportOnIndexesCompletedDelegate == null)) {
                this.onReportOnIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReportOnIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginReportOnIndexesDelegate, null, this.onEndReportOnIndexesDelegate, this.onReportOnIndexesCompletedDelegate, userState);
        }
        
        public bool Ping() {
            return base.Channel.Ping();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            bool retVal = this.EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        public void UpdateIndex(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows) {
            base.Channel.UpdateIndex(indexName, rows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateIndex(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateIndex(indexName, rows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateIndex(System.IAsyncResult result) {
            base.Channel.EndUpdateIndex(result);
        }
        
        private System.IAsyncResult OnBeginUpdateIndex(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string indexName = ((string)(inValues[0]));
            System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows = ((System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow>)(inValues[1]));
            return this.BeginUpdateIndex(indexName, rows, callback, asyncState);
        }
        
        private object[] OnEndUpdateIndex(System.IAsyncResult result) {
            this.EndUpdateIndex(result);
            return null;
        }
        
        private void OnUpdateIndexCompleted(object state) {
            if ((this.UpdateIndexCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateIndexAsync(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows) {
            this.UpdateIndexAsync(indexName, rows, null);
        }
        
        public void UpdateIndexAsync(string indexName, System.Collections.Generic.List<GrinGlobal.Business.SearchSvc.UpdateRow> rows, object userState) {
            if ((this.onBeginUpdateIndexDelegate == null)) {
                this.onBeginUpdateIndexDelegate = new BeginOperationDelegate(this.OnBeginUpdateIndex);
            }
            if ((this.onEndUpdateIndexDelegate == null)) {
                this.onEndUpdateIndexDelegate = new EndOperationDelegate(this.OnEndUpdateIndex);
            }
            if ((this.onUpdateIndexCompletedDelegate == null)) {
                this.onUpdateIndexCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateIndexCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateIndexDelegate, new object[] {
                        indexName,
                        rows}, this.onEndUpdateIndexDelegate, this.onUpdateIndexCompletedDelegate, userState);
        }
        
        public void UpdateIndexRow(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row) {
            base.Channel.UpdateIndexRow(indexName, row);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateIndexRow(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateIndexRow(indexName, row, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateIndexRow(System.IAsyncResult result) {
            base.Channel.EndUpdateIndexRow(result);
        }
        
        private System.IAsyncResult OnBeginUpdateIndexRow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string indexName = ((string)(inValues[0]));
            GrinGlobal.Business.SearchSvc.UpdateRow row = ((GrinGlobal.Business.SearchSvc.UpdateRow)(inValues[1]));
            return this.BeginUpdateIndexRow(indexName, row, callback, asyncState);
        }
        
        private object[] OnEndUpdateIndexRow(System.IAsyncResult result) {
            this.EndUpdateIndexRow(result);
            return null;
        }
        
        private void OnUpdateIndexRowCompleted(object state) {
            if ((this.UpdateIndexRowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateIndexRowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateIndexRowAsync(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row) {
            this.UpdateIndexRowAsync(indexName, row, null);
        }
        
        public void UpdateIndexRowAsync(string indexName, GrinGlobal.Business.SearchSvc.UpdateRow row, object userState) {
            if ((this.onBeginUpdateIndexRowDelegate == null)) {
                this.onBeginUpdateIndexRowDelegate = new BeginOperationDelegate(this.OnBeginUpdateIndexRow);
            }
            if ((this.onEndUpdateIndexRowDelegate == null)) {
                this.onEndUpdateIndexRowDelegate = new EndOperationDelegate(this.OnEndUpdateIndexRow);
            }
            if ((this.onUpdateIndexRowCompletedDelegate == null)) {
                this.onUpdateIndexRowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateIndexRowCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateIndexRowDelegate, new object[] {
                        indexName,
                        row}, this.onEndUpdateIndexRowDelegate, this.onUpdateIndexRowCompletedDelegate, userState);
        }
        
        public void DefragIndexes(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete) {
            base.Channel.DefragIndexes(indexNames, rotateInOnComplete);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDefragIndexes(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDefragIndexes(indexNames, rotateInOnComplete, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDefragIndexes(System.IAsyncResult result) {
            base.Channel.EndDefragIndexes(result);
        }
        
        private System.IAsyncResult OnBeginDefragIndexes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<string> indexNames = ((System.Collections.Generic.List<string>)(inValues[0]));
            bool rotateInOnComplete = ((bool)(inValues[1]));
            return this.BeginDefragIndexes(indexNames, rotateInOnComplete, callback, asyncState);
        }
        
        private object[] OnEndDefragIndexes(System.IAsyncResult result) {
            this.EndDefragIndexes(result);
            return null;
        }
        
        private void OnDefragIndexesCompleted(object state) {
            if ((this.DefragIndexesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DefragIndexesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DefragIndexesAsync(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete) {
            this.DefragIndexesAsync(indexNames, rotateInOnComplete, null);
        }
        
        public void DefragIndexesAsync(System.Collections.Generic.List<string> indexNames, bool rotateInOnComplete, object userState) {
            if ((this.onBeginDefragIndexesDelegate == null)) {
                this.onBeginDefragIndexesDelegate = new BeginOperationDelegate(this.OnBeginDefragIndexes);
            }
            if ((this.onEndDefragIndexesDelegate == null)) {
                this.onEndDefragIndexesDelegate = new EndOperationDelegate(this.OnEndDefragIndexes);
            }
            if ((this.onDefragIndexesCompletedDelegate == null)) {
                this.onDefragIndexesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDefragIndexesCompleted);
            }
            base.InvokeAsync(this.onBeginDefragIndexesDelegate, new object[] {
                        indexNames,
                        rotateInOnComplete}, this.onEndDefragIndexesDelegate, this.onDefragIndexesCompletedDelegate, userState);
        }
    }
}
